package bookrec;

import java.io.IOException;

import org.apache.hadoop.mapreduce.lib.input.MultipleInputs;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
//import org.apache.hadoop.mapreduce.Mapper.Context;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;




public class bookRecommender {
		
	
	public static class countMapper extends Mapper <Object, Text, Text, Text>
	 {
		//String one="1";
	 public void map(Object key, Text value, Context context)
	 throws IOException, InterruptedException 
	 {
	 String record = value.toString();
	 String[] parts = record.split(",");
	 context.write(new Text(parts[2]), new Text("rating," +parts[3]));//rating,4.7
	 }
	
	
	 }
	
	
	public static class categoryMapper extends Mapper<Object,Text,Text,Text>{
		public void map(Object key, Text value, Context context)
				 throws IOException, InterruptedException 
				 {
				 String record = value.toString();
				 String[] parts = record.split(",");
				 context.write(new Text(parts[2]), new Text("category,"+parts[3]));//category,Drama
				 }
		
	}
	
	public static class numberbooksMapper extends Mapper<Object,Text,Text,Text>{
		public void map(Object key, Text value, Context context)
				 throws IOException, InterruptedException 
				 {
				 String record = value.toString();
				 String[] parts = record.split(",");
				 context.write(new Text(parts[2]), new Text("number,"+"1"));//(author,"number,1)
				 }
		
	}
	

	
	
	
	public static class ReduceJoinReducer extends Reducer <Text, Text, Text, Text>
	 {
		//private IntWritable result=new IntWritable();

	 public void reduce(Text key, Iterable<Text> values, Context context)
	 throws IOException, InterruptedException 
	 {
	// String name = "";
		 int number_books_for_Author=0;
		 double bookcount=0.0;
     double ratingsum=0.0;
	 double avgrating = 0.0;
	 int count=0;
	 String category="";
	 for (Text t : values) 
	 {
		 bookcount++;
		 String partss[] = t.toString().split(",");
		 if(partss[0].equals("rating")){
			 count++;
			 ratingsum+=Float.parseFloat(partss[1]);
		 }
		 else if(partss[0].equals("category")){
			// number_books_for_Author+=Integer.parseInt(partss[1]);
			 category=partss[1];
		 }
		 
		 else if(partss[0].equals("number")){
				
			 number_books_for_Author+=Integer.parseInt(partss[1]);	
			 }

	 }
	 
	      avgrating=ratingsum/count;
	 	// number_books_for_Author++;
		
	 
	 //number_books_for_Author=Float.parseFloat(((String)(count)).toString());
	 
	 String str=String.format("%f %s %d", avgrating,category,number_books_for_Author);
	
	 context.write(new Text(key),new Text(str));
	 }
	
	 }
	
	public static void main(String[] args) throws Exception {
		 
		 Configuration f = new Configuration();
		Job j=Job.getInstance(f,"BookRecommend");
		j.setJarByClass(bookRecommender.class);
		j.setReducerClass(ReduceJoinReducer.class);
		
		j.setOutputKeyClass(Text.class);
		j.setOutputValueClass(Text.class);
		
		MultipleInputs.addInputPath(j, new Path(args[0]),TextInputFormat.class, countMapper.class);
		MultipleInputs.addInputPath(j, new Path(args[1]),TextInputFormat.class, categoryMapper.class);
		MultipleInputs.addInputPath(j, new Path(args[2]),TextInputFormat.class, numberbooksMapper.class);

		
		 Path outputPath = new Path(args[3]);
		 FileOutputFormat.setOutputPath(j, outputPath);
		
		//j.setMapperClass(bookMapper.class);
		//j.setMapperClass(countMapper.class);
		

		//j.setCombinerClass(ReduceJoinReducer.class);
		
		// MultipleInputs.addInputPath(j, new Path(args[0]),TextInputFormat.class, bookMapper.class);
		// MultipleInputs.addInputPath(j, new Path(args[1]),TextInputFormat.class, countMapper.class);
		// Path outputPath = new Path(args[2]);
		  
		// FileOutputFormat.setOutputPath(j, outputPath);
		///FileInputFormat.setInputPaths(j,new Path(args[0]));
		//.setOutputPath(j,new Path(args[1]));
		// outputPath.getFileSystem(f).delete(outputPath);
		 outputPath.getFileSystem(f).delete(outputPath);
		 System.exit(j.waitForCompletion(true) ? 0 : 1);
		 }
	 }

	
	
	
	
	
	
	
	
	

	 

